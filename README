This is a fun project that parses a JSON database of stock symbols and attributes (relational JSON) and uses the strategy pattern to 
parse a formula to be executed on the stock attribites. The implementation uses the strategy pattern, and a few other design patterns.

This implementation supports all operators (+, -, * /) and indefinitely deep nested 'fn' expressions.
Attributes are read from the CSV data source, and so if new attributes are added, they can be used in expressions as well.

Running:
--------

This code was developed in Java using the Spring Boot framework on macOS 10.
As such, this project can be opened and run from Spring Tool Suite.

User acceptance testing:
------------------------

I list a few basic user acceptance tests below, showing the application response in success and failure cases:

** Simple expression
$ curl -X POST -H "Content-Type: application/json" -d '{"security":"ABC", "expression":"{\"fn\":\"+\", \"a\":1, \"b\":1}"}' http://localhost:8080/
{"query":{"security":"ABC","expression":"{\"fn\":\"+\", \"a\":1, \"b\":1}"},"value":"2.0"}

** Malformed expression
$ curl -X POST -H "Content-Type: application/json" -d '{"security":"BCD", "expression":"this does not follow the DSL ((1+1)+(5/5))*45/(((4+(1-1+1   ))))"}' http://localhost:8080/
{"query":{"security":"BCD","expression":"this does not follow the DSL ((1+1)+(5/5))*45/(((4+(1-1+1   ))))"},"value":"Error: MALFORMED"}

** Nested expression
$ curl -X POST -H "Content-Type: application/json" -d '{"security":"ABC", "expression":"{\"fn\":\"-\", \"a\":\"eps\", \"b\":{\"fn\":\"*\", \"a\":\"debt\", \"b\":5}}"}' http://localhost:8080/
{"query":{"security":"ABC","expression":"{\"fn\":\"-\", \"a\":\"eps\", \"b\":{\"fn\":\"*\", \"a\":\"debt\", \"b\":5}}"},"value":"-43.0"}

** Unknown securities symbol
$ curl -X POST -H "Content-Type: application/json" -d '{"security":"LLL", "expression":"{\"fn\":\"+\":1, \"b\":1}"}' http://localhost:8080/
{"query":{"security":"LLL","expression":"{\"fn\":\"+\", \"a\":1, \"b\":1}"},"value":"Error: could not find: [LLL]

** DSL validation
$ curl -X POST -H "Content-Type: application/json" -d '{"expression":"{\"fn\":\"+\", \"a\":1, \"b\":1}"}' http://localhost:8080/
{"timestamp":"2019-07-24T21:26:09.431+0000","status":400,"error":"Bad Request","errors":[{"codes":["NotBlank.queryDTO.security","NotBlank.security","NotBlank.java.lang.String","NotBlank"],"arguments":[{"codes":["queryDTO.security","security"],"arguments":null,"defaultMessage":"security","code":"security"}],"defaultMessage":"Please provide a valid security. 3 Letters only.","objectName":"queryDTO","field":"security","rejectedValue":null,"bindingFailure":false,"code":"NotBlank"}],"message":"Validation failed for object='queryDTO'. Error count: 1","path":"/"}

Notes:
------

** Unit tests:
I include examples of unit tests, with more time I would implement a full suite of unit tests
The unit tests can be run individually, and there is also a TestSuite.java class to run a suite. They can also be run as an application using the TestRunner.java class.

** BDD tests:
I include an example of a BDD feature file in com.ernstvangraan.stockopedia.test.bdd, with more time I would implement a full suite of unit tests

Error handling: I added some data validation checks in the ORM classes, as well as some on the web controller. The following error handling I would improve given more time:
  - malformed expressions (whether from an error in json parsing or so provided)
  - configuration file not present
  - configuration value missing
  - configuration value invalid
  - request data missing
  - request data invalid
  - security not found
  
Internationalization: At some point, should client languages be supported, internationalization libraries could be introduced.
Also, content in Constants should be retrieved from a languages.properties file and this mechanism should be used through-out
to replace all messages.

